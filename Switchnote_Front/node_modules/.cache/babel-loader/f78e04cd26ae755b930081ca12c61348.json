{"ast":null,"code":"var util = require('util');\nvar spawn = require('child_process').spawn;\nvar child = spawn('python', ['-u', '-i']);\nvar cmdQueue = new Array();\nchild.stdout.on('data', handleStdout);\nchild.stderr.on('data', handleStderr);\nchild.on('exit', handleExit);\nfunction handleStdout(data) {\n  var datastr = data.toString('utf8');\n  var finished = false;\n  if (datastr.match(/Command Start\\n/)) {\n    datastr = datastr.replace(/Command Start\\n/, '');\n  }\n  if (datastr.match(/Command End\\n/)) {\n    datastr = datastr.replace(/Command End\\n/, '');\n    finished = true;\n  }\n  if (cmdQueue.length > 0) {\n    cmdQueue[0].data += datastr;\n  }\n  if (finished) {\n    cmd = cmdQueue.shift();\n    if (cmd && cmd.command) {\n      if (undefined != typeof cmd.callback) {\n        cmd.callback(null, cmd.data);\n        processQueue();\n      }\n    }\n  }\n}\n;\nfunction handleStderr(data) {\n  processQueue();\n}\n;\nfunction processQueue() {\n  if (cmdQueue.length > 0 && cmdQueue[0].state === 'pending') {\n    cmdQueue[0].state = 'processing';\n    child.stdin.write(cmdQueue[0].command, encoding = 'utf8');\n  }\n}\n;\nfunction handleExit(code) {\n  console.log('child process exited with code ' + code);\n  process.exit();\n}\n;\nthis.shell = function (command, callback) {\n  command = 'print \"Command Start\"; ' + command + '\\nprint \"Command End\"';\n  if (command.charAt[command.length - 1] != '\\n') command += '\\n';\n  cmdQueue.push({\n    'command': command,\n    'callback': callback,\n    'data': '',\n    state: 'pending'\n  });\n  processQueue();\n};","map":null,"metadata":{},"sourceType":"script"}