{"ast":null,"code":"var _jsxFileName = \"/Users/taein/Desktop/\\u1112\\u1161\\u11AB\\u110B\\u1175\\u110B\\u1173\\u11B7/SwitchNote_1101/Switchnote_Front/src/components/TxtInput.js\",\n  _s = $RefreshSig$();\n//Txt->PPT 중 텍스트 업로드 페이지\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport loadingIcon from './images/loading.gif';\nimport MyButton from './MyButton.js';\nimport { CallGPT } from '../api/gpt';\nimport TextInput from './TextInput.js';\nimport { CallKoBERT } from '../api/kobert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TxtInput() {\n  _s();\n  // 사용자 입력값 저장 상태\n  const [userInput, setUserInput] = useState(\"\");\n\n  // ppt 생성 기능\n  const handleSubmit = async () => {\n    await handleCreatePPT(userInput);\n  };\n  const [data, setData] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // ppt 생성 함수\n  const handleCreatePPT = async input => {\n    try {\n      setIsLoading(true);\n      const message = await CallGPT({\n        prompt: `${input}`\n      });\n      console.log(message);\n      console.log(transformGPTOutput(message));\n\n      //kobertResult 변수에 kobert 수행 결과가 들어 있음\n      const kobertResult = await CallKoBERT({\n        text: `${input}`\n      });\n      console.log(kobertResult);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  //gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\n  const transformGPTOutput = gptOutput => {\n    // '---' 기호를 기준으로 페이지 분리\n    const pages = gptOutput.split('---');\n    const database = [];\n\n    // 페이지 타입과 해당하는 알파벳 문자 매핑\n    const pageTypeMapping = {\n      '[표지]': 'a',\n      '[목차]': 'b',\n      '[본문]': 'c',\n      '[마무리]': 'd'\n    };\n    for (const page of pages) {\n      const lines = page.split('\\n');\n      let title = \"\",\n        subtitle = \"\",\n        contentList = [],\n        pageNumber = 0,\n        pageType = \"\";\n      for (const line of lines) {\n        if (Object.keys(pageTypeMapping).some(pageTypeKey => line.includes(pageTypeKey))) {\n          const matchedPageTypeKey = Object.keys(pageTypeMapping).find(pageTypeKey => line.includes(pageTypeKey));\n          if (matchedPageTypeKey) {\n            pageType = pageTypeMapping[matchedPageTypeKey];\n          }\n        } else if (line.includes(\"페이지 번호:\")) {\n          pageNumber = parseInt(line.split(\"페이지 번호:\")[1].trim());\n        } else if (line.includes(\"제목:\")) {\n          title += line.split(\"제목:\")[1].trim();\n        } else if (line.includes(\"소제목:\")) {\n          subtitle += line.split(\"소제목:\")[1].trim();\n        } else if (line.includes(\"내용:\") || line.includes(\"마무리 문장:\")) {\n          contentList.push(line.trim());\n        } else {\n          if (line.trim().length > 0) {\n            contentList.push(line.trim());\n          }\n        }\n      }\n      const dataDict = {\n        page: pageNumber,\n        type: pageType,\n        title: title,\n        subtitle: subtitle,\n        content: contentList\n      };\n      database.push(dataDict);\n    }\n    return database;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"TxtToPPT\",\n      children: [\"Text to PPT\", /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"PPT\\uB97C \\uB9CC\\uB4DC\\uB294 \\uAC00\\uC7A5 \\uBE60\\uB978 \\uBC29\\uBC95\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TextInput, {\n          isLoading: isLoading,\n          onSubmit: setUserInput,\n          value: userInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          gap: '10px',\n          marginTop: '50px'\n        },\n        children: isLoading ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: loadingIcon,\n          alt: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 19\n        }, this) : /*#__PURE__*/_jsxDEV(MyButton, {\n          text: 'PPT 생성',\n          onClick: () => handleSubmit(userInput),\n          type: \"blue\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 7\n  }, this);\n}\n_s(TxtInput, \"V6DvUh+aYnXPd1HYSBq9We5kMLE=\");\n_c = TxtInput;\nexport default TxtInput;\nvar _c;\n$RefreshReg$(_c, \"TxtInput\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","loadingIcon","MyButton","CallGPT","TextInput","CallKoBERT","jsxDEV","_jsxDEV","TxtInput","_s","userInput","setUserInput","handleSubmit","handleCreatePPT","data","setData","isLoading","setIsLoading","input","message","prompt","console","log","transformGPTOutput","kobertResult","text","error","gptOutput","pages","split","database","pageTypeMapping","page","lines","title","subtitle","contentList","pageNumber","pageType","line","Object","keys","some","pageTypeKey","includes","matchedPageTypeKey","find","parseInt","trim","push","length","dataDict","type","content","children","id","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","value","style","display","flexDirection","alignItems","gap","marginTop","src","alt","onClick","_c","$RefreshReg$"],"sources":["/Users/taein/Desktop/한이음/SwitchNote_1101/Switchnote_Front/src/components/TxtInput.js"],"sourcesContent":["//Txt->PPT 중 텍스트 업로드 페이지\nimport React, { useEffect, useRef, useState } from 'react';\nimport {useParams} from 'react-router-dom'\nimport loadingIcon from './images/loading.gif';\nimport MyButton from './MyButton.js';\nimport { CallGPT } from '../api/gpt';\nimport TextInput from './TextInput.js';\nimport { CallKoBERT } from '../api/kobert';\n\nfunction TxtInput() {\n    // 사용자 입력값 저장 상태\n    const [userInput, setUserInput] = useState(\"\");\n  \n    // ppt 생성 기능\n    const handleSubmit = async () => {\n      await handleCreatePPT(userInput);\n    }\n  \n    const [data, setData] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n  \n    // ppt 생성 함수\n    const handleCreatePPT = async(input) => {\n      try{\n        setIsLoading(true);\n        const message = await CallGPT({\n          prompt: `${input}`});\n        console.log(message);\n        console.log(transformGPTOutput(message));\n  \n        //kobertResult 변수에 kobert 수행 결과가 들어 있음\n        const kobertResult = await CallKoBERT({text: `${input}`})\n        console.log(kobertResult);\n      } catch(error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n  \n    //gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\n    const transformGPTOutput = (gptOutput) => {\n      // '---' 기호를 기준으로 페이지 분리\n      const pages = gptOutput.split('---');\n    \n      const database = [];\n    \n      // 페이지 타입과 해당하는 알파벳 문자 매핑\n      const pageTypeMapping = {\n          '[표지]': 'a',\n          '[목차]': 'b',\n          '[본문]': 'c',\n          '[마무리]': 'd'\n      };\n    \n      for (const page of pages) {\n          const lines = page.split('\\n');\n    \n          let title = \"\", subtitle = \"\", contentList = [], pageNumber = 0, pageType = \"\";\n    \n          for (const line of lines) {\n              if (Object.keys(pageTypeMapping).some(pageTypeKey => line.includes(pageTypeKey))) {\n                  const matchedPageTypeKey = Object.keys(pageTypeMapping).find(pageTypeKey => line.includes(pageTypeKey));\n    \n                  if (matchedPageTypeKey) {\n                      pageType = pageTypeMapping[matchedPageTypeKey];\n                  }\n              } else if (line.includes(\"페이지 번호:\")) {\n                  pageNumber = parseInt(line.split(\"페이지 번호:\")[1].trim());\n              } else if (line.includes(\"제목:\")) {\n                  title += line.split(\"제목:\")[1].trim();\n              } else if (line.includes(\"소제목:\")) {\n                  subtitle += line.split(\"소제목:\")[1].trim();\n              } else if (line.includes(\"내용:\") || line.includes(\"마무리 문장:\")) {\n                  contentList.push(line.trim());\n              } else {\n                  if (line.trim().length > 0) {\n                      contentList.push(line.trim());\n                  }\n              }\n          }\n    \n          const dataDict = {\n              page: pageNumber, \n              type: pageType,\n              title: title, \n              subtitle: subtitle, \n              content: contentList\n          };\n    \n          database.push(dataDict);\n      }\n    \n      return database;\n    };\n\n  return(\n      <div>\n          <div id='TxtToPPT'>\n              Text to PPT\n              <div>\n                  PPT를 만드는 가장 빠른 방법\n              </div>\n\n              <div>\n                <TextInput \n                  isLoading={isLoading} \n                  onSubmit={setUserInput} \n                  value={userInput}\n                />\n              </div>\n              \n              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap:'10px', marginTop:'50px'}}>\n                {isLoading ? (\n                  <img src={loadingIcon} alt=\"Loading...\" />\n                ) : (\n                  <MyButton \n                    text={'PPT 생성'}\n                    onClick={() => handleSubmit(userInput)}\n                    type={\"blue\"}\n                  />\n                )}\n              </div>\n          </div>\n      </div>\n  )\n}\n\nexport default TxtInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}