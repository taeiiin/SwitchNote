{"ast":null,"code":"var _jsxFileName = \"/Users/kimjuyeon/Switch_Sat/Switchnote_Front/src/components/TxtInput.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport refreshIcon from './images/refreshIcon.png';\nimport copyIcon from './images/copyIcon.png';\nimport loadingIcon from './images/loading.gif';\nimport MyButton from './MyButton.js';\nimport MyTextarea from './MyTextarea.js';\nimport { CallGPT } from '../api/gpt';\nimport TextInput from './TextInput.js';\nimport { CallKoBERT } from '../api/kobert';\nimport PPTSel from './PPTSel.js';\nimport { generatePPT } from '../api/generatePPT';\nfunction TxtInput({\n  getProjectById\n}) {\n  const [projectTitle, setProjectTitle] = useState('');\n  const [projectSubTitle, setProjectSubTitle] = useState('');\n  const [projectContent, setProjectContent] = useState('');\n  const [project, setProject] = useState(null);\n  const {\n    projectId\n  } = useParams();\n  const [pptURLs, setPPTURLs] = useState('');\n  const navigate = useNavigate();\n\n  // 사용자 입력값 저장 상태\n  const [userInput, setUserInput] = useState(\"\");\n  useEffect(() => {\n    if (projectId) {\n      const projectData = getProjectById(projectId);\n      if (projectData) {\n        setProjectContent(projectData.content); // 프로젝트 내용 저장\n        setUserInput(projectData.content); // 프로젝트 내용이 Input이니까 userInput에도 동일한 내용 저장\n        setProject(projectData); // 프로젝트 데이터 저장\n        setProjectTitle(projectData.title); // 프로젝트 제목 저장\n      }\n    }\n  }, [projectId]);\n\n  // 텍스트 새로고침\n  const handleClearText = () => {\n    setProjectContent('');\n    setUserInput('');\n  };\n\n  // 텍스트 복사\n  const handleCopyText = async () => {\n    await navigator.clipboard.writeText(userInput);\n    alert('텍스트가 클립보드에 복사되었습니다.');\n  };\n\n  // ppt 생성 기능\n  const handleSubmit = async () => {\n    await handleCreatePPT(userInput);\n    // transformGPTOutput(handleCreatePPT(userInput));\n  };\n\n  const [data, setData] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // ppt 생성 함수\n  const handleCreatePPT = async input => {\n    try {\n      setIsLoading(true);\n      const message = await CallGPT({\n        prompt: `${input}`\n      });\n      // const message = `[표지]\n      // 페이지 번호: 1\n      // 제목: 세계 음식 문화에 대한 탐구\n      // 소제목: \n      // 작성자: [작성자 이름]\n\n      // ---\n\n      // [목차]\n      // 페이지 번호: 2\n      // 제목: 목차\n      // 소제목: \n      //     1) 이탈리아 - 피자와 파스타의 고향\n      //     2) 일본 - 사케와 초밥의 나라\n      //     3) 멕시코 - 타코와 갓마레스\n      //     4) 한국 - 김장과 한정식\n\n      // ---\n\n      // [본문]\n      // 페이지 번호: 3\n      // 제목: 이탈리아 - 피자와 파스타의 고향\n      // 소제목: \n      //     1) 이탈리아의 음식 문화\n      //     2) 지역별 다양한 스타일과 맛\n\n      // 내용:\n      //     - 이탈리아의 음식은 심플하면서도 신선한 재료를 사용하여 만들어집니다.\n      //     - 지역별로 다양한 스타일과 맛을 가지고 있습니다.\n\n      // ---\n\n      // [본문]\n      // 페이지 번호: 4\n      // 제목: 일본 - 사케와 초밥의 나라\n      // 소제목: \n      //     1) 일본의 음식 문화\n      //     2) 정교함과 아름다움을 갖춘 일본 요리\n\n      // 내용:\n      //     - 일본 요리는 식재료의 신선도와 조리 기술에 큰 중점을 두고 있습니다.\n      //     - 사케와 초밥을 비롯한 일본 요리는 정교함과 아름다움으로 인정받고 있습니다.\n\n      // ---\n\n      // [본문]\n      // 페이지 번호: 5\n      // 제목: 멕시코 - 타코와 갓마레스\n      // 소제목: \n      //     1) 멕시코의 음식 문화\n      //     2) 다양한 맛과 향을 갖춘 멕시코 요리\n\n      // 내용:\n      //     - 멕시코 요리는 매우 다양하고 풍부한 맛과 향을 가지고 있습니다.\n      //     - 타코는 멕시코인들에게 깊은 정체성과 자부심을 주는 중요한 요소입니다.\n\n      // ---\n\n      // [본문]\n      // 페이지 번호: 6\n      // 제목: 한국 - 김장과 한정식\n      // 소제목: \n      //     1) 한국의 음식 문화\n      //     2) 발효 식품과 다양하게 조미된 음식의 특징\n\n      // 내용:\n      //     - 김장은 한국에서 가장 중요하게 여겨지며, 건강에 좋다고 알려져 있습니다.\n      //     - 한정식은 한국 전통음식으로, 여러 개의 반찬이 함께 제공되어 왕성함과 다양성을 나타냅니다.\n\n      // ---\n\n      // [마무리]\n      // 페이지 번호: 7\n      // 마무리 문장: 세계 각국의 음식 문화를 살펴보면 그들이 지닌 독특함과 창조력을 발견할 수 있습니다. 음식은 우리가 속하는 문화와 밀접하게 연결되어 있으며, 인류가 가진 창조력과 차별성을 보여주는 중요한 영역입니다. 우리는 서로 다른 음식문화를 경험함으로써 상호 이해와 교류를 할 수 있습니다.`;\n      console.log(message);\n      console.log(transformGPTOutput(message));\n\n      //kobertResult 변수에 kobert 수행 결과가 들어 있음\n      const kobertResult = await CallKoBERT({\n        text: `${input}`\n      });\n      // const kobertResult = 'education';\n      console.log(kobertResult);\n      // const kobertResult = 'education';\n      const url = await generatePPT(transformGPTOutput(message), kobertResult, projectTitle);\n      setPPTURLs(url);\n      navigate('/PPTSel', {\n        state: {\n          pptURLs: url,\n          pptTitle: projectTitle,\n          pptContent: projectSubTitle\n        }\n      });\n      console.log(url);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  //gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\n  const transformGPTOutput = gptOutput => {\n    // '---' 기호를 기준으로 페이지 분리\n    const pages = gptOutput.split('---');\n    const database = [];\n\n    // 페이지 타입과 해당하는 알파벳 문자 매핑\n    const pageTypeMapping = {\n      '[표지]': 'a',\n      '[목차]': 'b',\n      '[본문]': 'c',\n      '[마무리]': 'd'\n    };\n    for (const page of pages) {\n      const lines = page.split('\\n');\n      let title = \"\",\n        subtitle = \"\",\n        contentList = [],\n        pageNumber = 0,\n        pageType = \"\";\n      for (const line of lines) {\n        if (Object.keys(pageTypeMapping).some(pageTypeKey => line.includes(pageTypeKey))) {\n          const matchedPageTypeKey = Object.keys(pageTypeMapping).find(pageTypeKey => line.includes(pageTypeKey));\n          if (matchedPageTypeKey) {\n            pageType = pageTypeMapping[matchedPageTypeKey];\n          }\n        } else if (line.includes(\"페이지 번호:\")) {\n          pageNumber = parseInt(line.split(\"페이지 번호:\")[1].trim());\n        } else if (line.includes(\"제목:\")) {\n          title += line.split(\"제목:\")[1].trim();\n        } else if (line.includes(\"소제목:\")) {\n          subtitle += line.split(\"소제목:\")[1].trim();\n        } else if (line.includes(\"내용:\") || line.includes(\"마무리 문장:\")) {\n          contentList.push(line.trim());\n        } else {\n          if (line.trim().length > 0) {\n            contentList.push(line.trim());\n          }\n        }\n      }\n      const dataDict = {\n        page: pageNumber,\n        type: pageType,\n        title: title,\n        subtitle: subtitle,\n        content: contentList\n      };\n      database.push(dataDict);\n    }\n    return database;\n  };\n\n  // 입력한 텍스트를 txt 파일로 저장\n  const handleDownload = (title, content) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = title ? `${title}.txt` : \"Untitled.txt\";\n    document.body.appendChild(element);\n    element.click();\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }\n  }, \"TEXT \\uBCC0\\uD658, \\uADF8\\uB9AC\\uACE0 PPT \\uC0DD\\uC131\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"fileName\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MyTextarea, {\n    placeholder: project ? project.title : '파일명을 입력하세요',\n    type: \"title\",\n    value: projectTitle,\n    onChange: e => setProjectTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(MyTextarea, {\n    placeholder: '부가설명을 입력하세요',\n    type: \"small\",\n    isLoading: isLoading,\n    value: projectSubTitle,\n    onChange: e => setProjectSubTitle(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      textAlign: \"right\",\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: refreshIcon,\n    alt: \"\\uC0C8\\uB85C\\uACE0\\uCE68\",\n    onClick: handleClearText,\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TextInput, {\n    isLoading: isLoading,\n    onSubmit: setUserInput,\n    value: userInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      textAlign: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: copyIcon,\n    alt: \"\\uD14D\\uC2A4\\uD2B8 \\uBCF5\\uC0AC\",\n    onClick: handleCopyText,\n    style: {\n      cursor: 'pointer'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      gap: '10px',\n      marginTop: '50px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"img\", {\n    src: loadingIcon,\n    alt: \"Loading...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }) : /*#__PURE__*/React.createElement(MyButton, {\n    text: 'PPT 생성',\n    onClick: () => handleSubmit(userInput),\n    type: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(MyButton, {\n    text: '.txt 파일로 다운로드',\n    onClick: () => handleDownload(projectTitle, userInput),\n    type: \"gray\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  })));\n}\nexport default TxtInput;","map":{"version":3,"names":["React","useEffect","useRef","useState","useNavigate","useParams","refreshIcon","copyIcon","loadingIcon","MyButton","MyTextarea","CallGPT","TextInput","CallKoBERT","PPTSel","generatePPT","TxtInput","getProjectById","projectTitle","setProjectTitle","projectSubTitle","setProjectSubTitle","projectContent","setProjectContent","project","setProject","projectId","pptURLs","setPPTURLs","navigate","userInput","setUserInput","projectData","content","title","handleClearText","handleCopyText","navigator","clipboard","writeText","alert","handleSubmit","handleCreatePPT","data","setData","isLoading","setIsLoading","input","message","prompt","console","log","transformGPTOutput","kobertResult","text","url","state","pptTitle","pptContent","error","gptOutput","pages","split","database","pageTypeMapping","page","lines","subtitle","contentList","pageNumber","pageType","line","Object","keys","some","pageTypeKey","includes","matchedPageTypeKey","find","parseInt","trim","push","length","dataDict","type","handleDownload","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexDirection","alignItems","htmlFor","placeholder","value","onChange","e","target","width","textAlign","marginTop","src","alt","onClick","cursor","onSubmit","gap"],"sources":["/Users/kimjuyeon/Switch_Sat/Switchnote_Front/src/components/TxtInput.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport {useParams} from 'react-router-dom'\nimport refreshIcon from './images/refreshIcon.png';\nimport copyIcon from './images/copyIcon.png';\nimport loadingIcon from './images/loading.gif';\nimport MyButton from './MyButton.js';\nimport MyTextarea from './MyTextarea.js';\nimport { CallGPT } from '../api/gpt';\nimport TextInput from './TextInput.js';\nimport { CallKoBERT } from '../api/kobert';\nimport PPTSel from './PPTSel.js';\nimport {generatePPT} from '../api/generatePPT'\n\nfunction TxtInput({ getProjectById }) {\n  const [projectTitle, setProjectTitle] = useState('');\n  const [projectSubTitle, setProjectSubTitle] = useState('');\n  const [projectContent, setProjectContent] = useState('');\n  const [project, setProject] = useState(null);\n  const { projectId } = useParams();\n  const [pptURLs, setPPTURLs] = useState('');\n  const navigate = useNavigate();\n\n  // 사용자 입력값 저장 상태\n  const [userInput, setUserInput] = useState(\"\");\n\n  useEffect(() => {\n    if (projectId) {\n      const projectData = getProjectById(projectId);\n      if (projectData) {\n        setProjectContent(projectData.content); // 프로젝트 내용 저장\n        setUserInput(projectData.content); // 프로젝트 내용이 Input이니까 userInput에도 동일한 내용 저장\n        setProject(projectData); // 프로젝트 데이터 저장\n        setProjectTitle(projectData.title); // 프로젝트 제목 저장\n      }\n    }\n  }, [projectId]);\n\n  // 텍스트 새로고침\n  const handleClearText = () => {\n    setProjectContent('');\n    setUserInput('');\n  };\n\n  // 텍스트 복사\n  const handleCopyText = async () => {\n    await navigator.clipboard.writeText(userInput);\n    alert('텍스트가 클립보드에 복사되었습니다.');\n  };\n\n  // ppt 생성 기능\n  const handleSubmit = async () => {\n    await handleCreatePPT(userInput);\n    // transformGPTOutput(handleCreatePPT(userInput));\n\n  }\n\n  const [data, setData] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // ppt 생성 함수\n  const handleCreatePPT = async(input) => {\n    try{\n      setIsLoading(true);\n      const message = await CallGPT({\n        prompt: `${input}`});\n      // const message = `[표지]\n      // 페이지 번호: 1\n      // 제목: 세계 음식 문화에 대한 탐구\n      // 소제목: \n      // 작성자: [작성자 이름]\n      \n      // ---\n      \n      // [목차]\n      // 페이지 번호: 2\n      // 제목: 목차\n      // 소제목: \n      //     1) 이탈리아 - 피자와 파스타의 고향\n      //     2) 일본 - 사케와 초밥의 나라\n      //     3) 멕시코 - 타코와 갓마레스\n      //     4) 한국 - 김장과 한정식\n      \n      // ---\n      \n      // [본문]\n      // 페이지 번호: 3\n      // 제목: 이탈리아 - 피자와 파스타의 고향\n      // 소제목: \n      //     1) 이탈리아의 음식 문화\n      //     2) 지역별 다양한 스타일과 맛\n      \n      // 내용:\n      //     - 이탈리아의 음식은 심플하면서도 신선한 재료를 사용하여 만들어집니다.\n      //     - 지역별로 다양한 스타일과 맛을 가지고 있습니다.\n      \n      // ---\n      \n      // [본문]\n      // 페이지 번호: 4\n      // 제목: 일본 - 사케와 초밥의 나라\n      // 소제목: \n      //     1) 일본의 음식 문화\n      //     2) 정교함과 아름다움을 갖춘 일본 요리\n      \n      // 내용:\n      //     - 일본 요리는 식재료의 신선도와 조리 기술에 큰 중점을 두고 있습니다.\n      //     - 사케와 초밥을 비롯한 일본 요리는 정교함과 아름다움으로 인정받고 있습니다.\n      \n      // ---\n      \n      // [본문]\n      // 페이지 번호: 5\n      // 제목: 멕시코 - 타코와 갓마레스\n      // 소제목: \n      //     1) 멕시코의 음식 문화\n      //     2) 다양한 맛과 향을 갖춘 멕시코 요리\n      \n      // 내용:\n      //     - 멕시코 요리는 매우 다양하고 풍부한 맛과 향을 가지고 있습니다.\n      //     - 타코는 멕시코인들에게 깊은 정체성과 자부심을 주는 중요한 요소입니다.\n      \n      // ---\n      \n      // [본문]\n      // 페이지 번호: 6\n      // 제목: 한국 - 김장과 한정식\n      // 소제목: \n      //     1) 한국의 음식 문화\n      //     2) 발효 식품과 다양하게 조미된 음식의 특징\n      \n      // 내용:\n      //     - 김장은 한국에서 가장 중요하게 여겨지며, 건강에 좋다고 알려져 있습니다.\n      //     - 한정식은 한국 전통음식으로, 여러 개의 반찬이 함께 제공되어 왕성함과 다양성을 나타냅니다.\n      \n      // ---\n      \n      // [마무리]\n      // 페이지 번호: 7\n      // 마무리 문장: 세계 각국의 음식 문화를 살펴보면 그들이 지닌 독특함과 창조력을 발견할 수 있습니다. 음식은 우리가 속하는 문화와 밀접하게 연결되어 있으며, 인류가 가진 창조력과 차별성을 보여주는 중요한 영역입니다. 우리는 서로 다른 음식문화를 경험함으로써 상호 이해와 교류를 할 수 있습니다.`;\n      console.log(message);\n\n      console.log(transformGPTOutput(message));\n      \n      //kobertResult 변수에 kobert 수행 결과가 들어 있음\n      const kobertResult = await CallKoBERT({text: `${input}`})\n      // const kobertResult = 'education';\n      console.log(kobertResult);\n      // const kobertResult = 'education';\n      const url = await generatePPT(transformGPTOutput(message),kobertResult,projectTitle);\n      setPPTURLs(url);\n      navigate('/PPTSel', { state: { pptURLs: url, pptTitle: projectTitle, pptContent: projectSubTitle } }); \n      console.log(url);\n    } catch(error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  //gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\n  const transformGPTOutput = (gptOutput) => {\n    // '---' 기호를 기준으로 페이지 분리\n    const pages = gptOutput.split('---');\n  \n    const database = [];\n  \n    // 페이지 타입과 해당하는 알파벳 문자 매핑\n    const pageTypeMapping = {\n        '[표지]': 'a',\n        '[목차]': 'b',\n        '[본문]': 'c',\n        '[마무리]': 'd'\n    };\n  \n    for (const page of pages) {\n        const lines = page.split('\\n');\n  \n        let title = \"\", subtitle = \"\", contentList = [], pageNumber = 0, pageType = \"\";\n  \n        for (const line of lines) {\n            if (Object.keys(pageTypeMapping).some(pageTypeKey => line.includes(pageTypeKey))) {\n                const matchedPageTypeKey = Object.keys(pageTypeMapping).find(pageTypeKey => line.includes(pageTypeKey));\n  \n                if (matchedPageTypeKey) {\n                    pageType = pageTypeMapping[matchedPageTypeKey];\n                }\n            } else if (line.includes(\"페이지 번호:\")) {\n                pageNumber = parseInt(line.split(\"페이지 번호:\")[1].trim());\n            } else if (line.includes(\"제목:\")) {\n                title += line.split(\"제목:\")[1].trim();\n            } else if (line.includes(\"소제목:\")) {\n                subtitle += line.split(\"소제목:\")[1].trim();\n            } else if (line.includes(\"내용:\") || line.includes(\"마무리 문장:\")) {\n                contentList.push(line.trim());\n            } else {\n                if (line.trim().length > 0) {\n                    contentList.push(line.trim());\n                }\n            }\n        }\n  \n        const dataDict = {\n            page: pageNumber, \n            type: pageType,\n            title: title, \n            subtitle: subtitle, \n            content: contentList\n        };\n  \n        database.push(dataDict);\n    }\n  \n    return database;\n  };\n\n  // 입력한 텍스트를 txt 파일로 저장\n  const handleDownload = (title, content) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], { type: \"text/plain\" });\n    element.href = URL.createObjectURL(file);\n    element.download = title ? `${title}.txt` : \"Untitled.txt\";\n    document.body.appendChild(element); \n    element.click();\n  };\n  \n  return (\n    <div>\n      <h3 style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>TEXT 변환, 그리고 PPT 생성</h3>\n\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\n        <label htmlFor=\"fileName\"></label>\n          <MyTextarea\n            placeholder={project ? project.title : '파일명을 입력하세요'} \n            type={\"title\"}\n            value={projectTitle}\n            onChange={(e) => setProjectTitle(e.target.value)}\n          />\n\n        <label htmlFor=\"description\"></label>\n          <MyTextarea \n            placeholder={'부가설명을 입력하세요'}\n            type={\"small\"}\n            isLoading={isLoading}\n            value={projectSubTitle}\n            onChange={(e) => setProjectSubTitle(e.target.value)}\n          />\n      </div>\n      \n      <div style={{ width: \"100%\", textAlign:\"right\", marginTop:'50px'}}>\n        <img\n          src={refreshIcon}\n          alt=\"새로고침\"\n          onClick={handleClearText}\n          style={{ cursor: 'pointer'}}\n        />\n      </div>\n\n      <div>\n        <TextInput \n          isLoading={isLoading} \n          onSubmit={setUserInput} \n          value={userInput}\n        />\n      </div>\n\n      <div style={{ width: \"100%\", textAlign:\"right\" }}>\n        <img\n          src={copyIcon}\n          alt=\"텍스트 복사\"\n          onClick={handleCopyText}\n          style={{ cursor: 'pointer'}}\n        />\n      </div>\n      \n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap:'10px', marginTop:'50px'}}>\n        {isLoading ? (\n          <img src={loadingIcon} alt=\"Loading...\" />\n        ) : (\n          <MyButton \n            text={'PPT 생성'}\n            onClick={() => handleSubmit(userInput)}\n            type={\"blue\"}\n          />\n        )}\n\n        <MyButton text={'.txt 파일로 다운로드'}\n          onClick={() => handleDownload(projectTitle, userInput)}\n          type={\"gray\"}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default TxtInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}