{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\1222p\\\\OneDrive\\\\\\uBC14\\uD0D5 \\uD654\\uBA74\\\\2023 \\uD55C\\uC774\\uC74C ICT\\\\switchnote_all\\\\Switchnote_Front\\\\src\\\\components\\\\TextEditor.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport refreshIcon from './images/refreshIcon.png';\nimport copyIcon from './images/copyIcon.png';\nimport loadingIcon from './images/loading.gif';\nimport MyButton from './MyButton.js';\nimport MyTextarea from './MyTextarea.js';\nimport { CallGPT } from '../api/gpt';\nimport TextInput from './TextInput.js';\nimport { CallKoBERT } from '../api/kobert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TextEditor({\n  getProjectById\n}) {\n  _s();\n  const [projectTitle, setProjectTitle] = useState('');\n  const [projectContent, setProjectContent] = useState('');\n  const [project, setProject] = useState(null);\n  const {\n    projectId\n  } = useParams();\n\n  // 사용자 입력값 저장 상태\n  const [userInput, setUserInput] = useState(\"\");\n  useEffect(() => {\n    if (projectId) {\n      const projectData = getProjectById(projectId);\n      if (projectData) {\n        setProjectContent(projectData.content); // 프로젝트 내용 저장\n        setUserInput(projectData.content); // 프로젝트 내용이 Input이니까 userInput에도 동일한 내용 저장\n        setProject(projectData); // 프로젝트 데이터 저장\n        setProjectTitle(projectData.title); // 프로젝트 제목 저장\n      }\n    }\n  }, [projectId]);\n\n  // 텍스트 새로고침\n  const handleClearText = () => {\n    setProjectContent('');\n    setUserInput('');\n  };\n\n  // 텍스트 복사\n  const handleCopyText = async () => {\n    await navigator.clipboard.writeText(userInput);\n    alert('텍스트가 클립보드에 복사되었습니다.');\n  };\n\n  // ppt 생성 기능\n  const handleSubmit = async () => {\n    await handleCreatePPT(userInput);\n  };\n  const [data, setData] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  // ppt 생성 함수\n  const handleCreatePPT = async input => {\n    try {\n      setIsLoading(true);\n      const message = await CallGPT({\n        prompt: `${input}`\n      });\n      setData(message);\n      const transformedInput = transformGPTOutputToKoBERTInput(message);\n\n      //kobertResult 변수에 kobert 수행 결과가 들어 있음\n      const kobertResult = await CallKoBERT({\n        text: transformedInput\n      });\n      console.log(kobertResult);\n    } catch (error) {\n      console.error(error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  //gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\n  const transformGPTOutputToKoBERTInput = gptOutput => {\n    // '---' 기호를 기준으로 페이지 분리\n    const pages = gptOutput.split('---');\n    const database = [];\n\n    // 페이지 타입과 해당하는 알파벳 문자 매핑\n    const pageTypeMapping = {\n      '[표지]': 'a',\n      '[목차]': 'b',\n      '[본문]': 'c',\n      '[마무리]': 'd'\n    };\n    for (const page of pages) {\n      const lines = page.split('');\n      let title = \"\",\n        subtitle = \"\",\n        contentList = [],\n        pageNumber = 0,\n        pageType = \"\";\n      for (const line of lines) {\n        if (Object.keys(pageTypeMapping).some(pageTypeKey => line.includes(pageTypeKey))) {\n          const matchedPageTypeKey = Object.keys(pageTypeMapping).find(pageTypeKey => line.includes(pageTypeKey));\n          if (matchedPageTypeKey) {\n            pageType = pageTypeMapping[matchedPageTypeKey];\n          }\n        } else if (line.includes(\"페이지 번호:\")) {\n          pageNumber = parseInt(line.split(\"페이지 번호:\")[1].trim());\n        } else if (line.includes(\"제목:\")) {\n          title += line.split(\"제목:\")[1].trim();\n        } else if (line.includes(\"소제목:\")) {\n          subtitle += line.split(\"소제목:\")[1].trim();\n        } else if (line.includes(\"내용:\") || line.includes(\"마무리 문장:\")) {\n          contentList.push(line.trim());\n        } else {\n          if (line.trim().length > 0) {\n            contentList.push(line.trim());\n          }\n        }\n      }\n      const dataDict = {\n        page: pageNumber,\n        type: pageType,\n        title: title,\n        subtitle: subtitle,\n        content: contentList\n      };\n      database.push(dataDict);\n    }\n    return database;\n  };\n\n  // 입력한 텍스트를 txt 파일로 저장\n  const handleDownload = (title, content) => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([content], {\n      type: \"text/plain\"\n    });\n    element.href = URL.createObjectURL(file);\n    element.download = title ? `${title}.txt` : \"Untitled.txt\";\n    document.body.appendChild(element);\n    element.click();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: \"TEXT \\uBCC0\\uD658, \\uADF8\\uB9AC\\uACE0 PPT \\uC0DD\\uC131\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"fileName\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyTextarea, {\n        placeholder: project ? project.title : '파일명을 입력하세요',\n        type: \"title\",\n        value: projectTitle,\n        onChange: e => setProjectTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MyTextarea, {\n        placeholder: '부가설명을 입력하세요',\n        type: \"small\",\n        isLoading: isLoading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        textAlign: \"right\",\n        marginTop: '50px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: refreshIcon,\n        alt: \"\\uC0C8\\uB85C\\uACE0\\uCE68\",\n        onClick: handleClearText,\n        style: {\n          cursor: 'pointer'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(TextInput, {\n        isLoading: isLoading,\n        onSubmit: setUserInput,\n        value: userInput\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        textAlign: \"right\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: copyIcon,\n        alt: \"\\uD14D\\uC2A4\\uD2B8 \\uBCF5\\uC0AC\",\n        onClick: handleCopyText,\n        style: {\n          cursor: 'pointer'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        gap: '10px',\n        marginTop: '50px'\n      },\n      children: [isLoading ? /*#__PURE__*/_jsxDEV(\"img\", {\n        src: loadingIcon,\n        alt: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(MyButton, {\n        text: 'PPT 생성',\n        onClick: () => handleSubmit(userInput),\n        type: \"blue\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MyButton, {\n        text: '.txt 파일로 다운로드',\n        onClick: () => handleDownload(projectTitle, userInput),\n        type: \"gray\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n}\n_s(TextEditor, \"U2vR8rxDixyWVV3Ma8XPZw5Or7Y=\", false, function () {\n  return [useParams];\n});\n_c = TextEditor;\nexport default TextEditor;\nvar _c;\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","refreshIcon","copyIcon","loadingIcon","MyButton","MyTextarea","CallGPT","TextInput","CallKoBERT","jsxDEV","_jsxDEV","TextEditor","getProjectById","_s","projectTitle","setProjectTitle","projectContent","setProjectContent","project","setProject","projectId","userInput","setUserInput","projectData","content","title","handleClearText","handleCopyText","navigator","clipboard","writeText","alert","handleSubmit","handleCreatePPT","data","setData","isLoading","setIsLoading","input","message","prompt","transformedInput","transformGPTOutputToKoBERTInput","kobertResult","text","console","log","error","gptOutput","pages","split","database","pageTypeMapping","page","lines","subtitle","contentList","pageNumber","pageType","line","Object","keys","some","pageTypeKey","includes","matchedPageTypeKey","find","parseInt","trim","push","length","dataDict","type","handleDownload","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","children","style","display","flexDirection","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","placeholder","value","onChange","e","target","width","textAlign","marginTop","src","alt","onClick","cursor","onSubmit","gap","_c","$RefreshReg$"],"sources":["C:/Users/1222p/OneDrive/바탕 화면/2023 한이음 ICT/switchnote_all/Switchnote_Front/src/components/TextEditor.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport {useParams} from 'react-router-dom'\r\nimport refreshIcon from './images/refreshIcon.png';\r\nimport copyIcon from './images/copyIcon.png';\r\nimport loadingIcon from './images/loading.gif';\r\nimport MyButton from './MyButton.js';\r\nimport MyTextarea from './MyTextarea.js';\r\nimport { CallGPT } from '../api/gpt';\r\nimport TextInput from './TextInput.js';\r\nimport { CallKoBERT } from '../api/kobert';\r\n\r\nfunction TextEditor({ getProjectById }) {\r\n  const [projectTitle, setProjectTitle] = useState('');\r\n  const [projectContent, setProjectContent] = useState('');\r\n  const [project, setProject] = useState(null);\r\n  const { projectId } = useParams();\r\n  \r\n  // 사용자 입력값 저장 상태\r\n  const [userInput, setUserInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (projectId) {\r\n      const projectData = getProjectById(projectId);\r\n      if (projectData) {\r\n        setProjectContent(projectData.content); // 프로젝트 내용 저장\r\n        setUserInput(projectData.content); // 프로젝트 내용이 Input이니까 userInput에도 동일한 내용 저장\r\n        setProject(projectData); // 프로젝트 데이터 저장\r\n        setProjectTitle(projectData.title); // 프로젝트 제목 저장\r\n      }\r\n    }\r\n  }, [projectId]);\r\n\r\n  // 텍스트 새로고침\r\n  const handleClearText = () => {\r\n    setProjectContent('');\r\n    setUserInput('');\r\n  };\r\n\r\n  // 텍스트 복사\r\n  const handleCopyText = async () => {\r\n    await navigator.clipboard.writeText(userInput);\r\n    alert('텍스트가 클립보드에 복사되었습니다.');\r\n  };\r\n\r\n  // ppt 생성 기능\r\n  const handleSubmit = async () => {\r\n    await handleCreatePPT(userInput);\r\n  }\r\n\r\n  const [data, setData] = useState(\"\");\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  // ppt 생성 함수\r\n  const handleCreatePPT = async(input) => {\r\n    try{\r\n      setIsLoading(true);\r\n      const message = await CallGPT({\r\n        prompt: `${input}`});\r\n      setData(message)\r\n\r\n      const transformedInput = transformGPTOutputToKoBERTInput(message);\r\n\r\n      //kobertResult 변수에 kobert 수행 결과가 들어 있음\r\n      const kobertResult = await CallKoBERT({text: transformedInput})\r\n      console.log(kobertResult);\r\n    } catch(error) {\r\n      console.error(error);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  //gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\r\n  const transformGPTOutputToKoBERTInput = (gptOutput) => {\r\n    // '---' 기호를 기준으로 페이지 분리\r\n    const pages = gptOutput.split('---');\r\n  \r\n    const database = [];\r\n  \r\n    // 페이지 타입과 해당하는 알파벳 문자 매핑\r\n    const pageTypeMapping = {\r\n        '[표지]': 'a',\r\n        '[목차]': 'b',\r\n        '[본문]': 'c',\r\n        '[마무리]': 'd'\r\n    };\r\n  \r\n    for (const page of pages) {\r\n        const lines = page.split('');\r\n  \r\n        let title = \"\", subtitle = \"\", contentList = [], pageNumber = 0, pageType = \"\";\r\n  \r\n        for (const line of lines) {\r\n            if (Object.keys(pageTypeMapping).some(pageTypeKey => line.includes(pageTypeKey))) {\r\n                const matchedPageTypeKey = Object.keys(pageTypeMapping).find(pageTypeKey => line.includes(pageTypeKey));\r\n  \r\n                if (matchedPageTypeKey) {\r\n                    pageType = pageTypeMapping[matchedPageTypeKey];\r\n                }\r\n            } else if (line.includes(\"페이지 번호:\")) {\r\n                pageNumber = parseInt(line.split(\"페이지 번호:\")[1].trim());\r\n            } else if (line.includes(\"제목:\")) {\r\n                title += line.split(\"제목:\")[1].trim();\r\n            } else if (line.includes(\"소제목:\")) {\r\n                subtitle += line.split(\"소제목:\")[1].trim();\r\n            } else if (line.includes(\"내용:\") || line.includes(\"마무리 문장:\")) {\r\n                contentList.push(line.trim());\r\n            } else {\r\n                if (line.trim().length > 0) {\r\n                    contentList.push(line.trim());\r\n                }\r\n            }\r\n        }\r\n  \r\n        const dataDict = {\r\n            page: pageNumber, \r\n            type: pageType,\r\n            title: title, \r\n            subtitle: subtitle, \r\n            content: contentList\r\n        };\r\n  \r\n        database.push(dataDict);\r\n    }\r\n  \r\n    return database;\r\n  };\r\n\r\n  // 입력한 텍스트를 txt 파일로 저장\r\n  const handleDownload = (title, content) => {\r\n    const element = document.createElement(\"a\");\r\n    const file = new Blob([content], { type: \"text/plain\" });\r\n    element.href = URL.createObjectURL(file);\r\n    element.download = title ? `${title}.txt` : \"Untitled.txt\";\r\n    document.body.appendChild(element); \r\n    element.click();\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <h3 style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>TEXT 변환, 그리고 PPT 생성</h3>\r\n\r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n        <label htmlFor=\"fileName\"></label>\r\n          <MyTextarea\r\n            placeholder={project ? project.title : '파일명을 입력하세요'} \r\n            type={\"title\"}\r\n            value={projectTitle}\r\n            onChange={(e) => setProjectTitle(e.target.value)}\r\n          />\r\n\r\n        <label htmlFor=\"description\"></label>\r\n          <MyTextarea \r\n            placeholder={'부가설명을 입력하세요'}\r\n            type={\"small\"}\r\n            isLoading={isLoading}\r\n          />\r\n      </div>\r\n      \r\n      <div style={{ width: \"100%\", textAlign:\"right\", marginTop:'50px'}}>\r\n        <img\r\n          src={refreshIcon}\r\n          alt=\"새로고침\"\r\n          onClick={handleClearText}\r\n          style={{ cursor: 'pointer'}}\r\n        />\r\n      </div>\r\n\r\n      <div>\r\n        <TextInput \r\n          isLoading={isLoading} \r\n          onSubmit={setUserInput} \r\n          value={userInput}\r\n        />\r\n      </div>\r\n\r\n      <div style={{ width: \"100%\", textAlign:\"right\" }}>\r\n        <img\r\n          src={copyIcon}\r\n          alt=\"텍스트 복사\"\r\n          onClick={handleCopyText}\r\n          style={{ cursor: 'pointer'}}\r\n        />\r\n      </div>\r\n      \r\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap:'10px', marginTop:'50px'}}>\r\n        {isLoading ? (\r\n          <img src={loadingIcon} alt=\"Loading...\" />\r\n        ) : (\r\n          <MyButton \r\n            text={'PPT 생성'}\r\n            onClick={() => handleSubmit(userInput)}\r\n            type={\"blue\"}\r\n          />\r\n        )}\r\n\r\n        <MyButton text={'.txt 파일로 다운로드'}\r\n          onClick={() => handleDownload(projectTitle, userInput)}\r\n          type={\"gray\"}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TextEditor;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}