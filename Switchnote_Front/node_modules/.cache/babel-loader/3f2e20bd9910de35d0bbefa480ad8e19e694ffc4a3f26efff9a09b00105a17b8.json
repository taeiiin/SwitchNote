{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/taein/Desktop/\\u1112\\u1161\\u11AB\\u110B\\u1175\\u110B\\u1173\\u11B7/SwitchNote_1101/Switchnote_Front/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _regeneratorRuntime from\"/Users/taein/Desktop/\\u1112\\u1161\\u11AB\\u110B\\u1175\\u110B\\u1173\\u11B7/SwitchNote_1101/Switchnote_Front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"/Users/taein/Desktop/\\u1112\\u1161\\u11AB\\u110B\\u1175\\u110B\\u1173\\u11B7/SwitchNote_1101/Switchnote_Front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/taein/Desktop/\\u1112\\u1161\\u11AB\\u110B\\u1175\\u110B\\u1173\\u11B7/SwitchNote_1101/Switchnote_Front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";//Txt->PPT 중 텍스트 업로드 페이지\nimport React,{useEffect,useRef,useState}from'react';import{useParams}from'react-router-dom';import loadingIcon from'./images/loading.gif';import MyButton from'./MyButton.js';import{CallGPT}from'../api/gpt';import TextInput from'./TextInput.js';import{CallKoBERT}from'../api/kobert';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function TxtInput(){// 사용자 입력값 저장 상태\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),userInput=_useState2[0],setUserInput=_useState2[1];// ppt 생성 기능\nvar handleSubmit=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(){return _regeneratorRuntime().wrap(function _callee$(_context){while(1)switch(_context.prev=_context.next){case 0:_context.next=2;return handleCreatePPT(userInput);case 2:case\"end\":return _context.stop();}},_callee);}));return function handleSubmit(){return _ref.apply(this,arguments);};}();var _useState3=useState(\"\"),_useState4=_slicedToArray(_useState3,2),data=_useState4[0],setData=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),isLoading=_useState6[0],setIsLoading=_useState6[1];// ppt 생성 함수\nvar handleCreatePPT=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(input){var message,kobertResult;return _regeneratorRuntime().wrap(function _callee2$(_context2){while(1)switch(_context2.prev=_context2.next){case 0:_context2.prev=0;setIsLoading(true);_context2.next=4;return CallGPT({prompt:\"\".concat(input)});case 4:message=_context2.sent;console.log(message);console.log(transformGPTOutput(message));//kobertResult 변수에 kobert 수행 결과가 들어 있음\n_context2.next=9;return CallKoBERT({text:\"\".concat(input)});case 9:kobertResult=_context2.sent;console.log(kobertResult);_context2.next=16;break;case 13:_context2.prev=13;_context2.t0=_context2[\"catch\"](0);console.error(_context2.t0);case 16:_context2.prev=16;setIsLoading(false);return _context2.finish(16);case 19:case\"end\":return _context2.stop();}},_callee2,null,[[0,13,16,19]]);}));return function handleCreatePPT(_x){return _ref2.apply(this,arguments);};}();//gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\nvar transformGPTOutput=function transformGPTOutput(gptOutput){// '---' 기호를 기준으로 페이지 분리\nvar pages=gptOutput.split('---');var database=[];// 페이지 타입과 해당하는 알파벳 문자 매핑\nvar pageTypeMapping={'[표지]':'a','[목차]':'b','[본문]':'c','[마무리]':'d'};var _iterator=_createForOfIteratorHelper(pages),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var page=_step.value;var lines=page.split('\\n');var title=\"\",subtitle=\"\",contentList=[],pageNumber=0,pageType=\"\";var _iterator2=_createForOfIteratorHelper(lines),_step2;try{var _loop=function _loop(){var line=_step2.value;if(Object.keys(pageTypeMapping).some(function(pageTypeKey){return line.includes(pageTypeKey);})){var matchedPageTypeKey=Object.keys(pageTypeMapping).find(function(pageTypeKey){return line.includes(pageTypeKey);});if(matchedPageTypeKey){pageType=pageTypeMapping[matchedPageTypeKey];}}else if(line.includes(\"페이지 번호:\")){pageNumber=parseInt(line.split(\"페이지 번호:\")[1].trim());}else if(line.includes(\"제목:\")){title+=line.split(\"제목:\")[1].trim();}else if(line.includes(\"소제목:\")){subtitle+=line.split(\"소제목:\")[1].trim();}else if(line.includes(\"내용:\")||line.includes(\"마무리 문장:\")){contentList.push(line.trim());}else{if(line.trim().length>0){contentList.push(line.trim());}}};for(_iterator2.s();!(_step2=_iterator2.n()).done;){_loop();}}catch(err){_iterator2.e(err);}finally{_iterator2.f();}var dataDict={page:pageNumber,type:pageType,title:title,subtitle:subtitle,content:contentList};database.push(dataDict);}}catch(err){_iterator.e(err);}finally{_iterator.f();}return database;};return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"div\",{id:\"TxtToPPT\",children:[\"Text to PPT\",/*#__PURE__*/_jsx(\"div\",{children:\"PPT\\uB97C \\uB9CC\\uB4DC\\uB294 \\uAC00\\uC7A5 \\uBE60\\uB978 \\uBC29\\uBC95\"}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(TextInput,{isLoading:isLoading,onSubmit:setUserInput,value:userInput})}),/*#__PURE__*/_jsx(\"div\",{style:{display:'flex',flexDirection:'column',alignItems:'center',gap:'10px',marginTop:'50px'},children:isLoading?/*#__PURE__*/_jsx(\"img\",{src:loadingIcon,alt:\"Loading...\"}):/*#__PURE__*/_jsx(MyButton,{text:'PPT 생성',onClick:function onClick(){return handleSubmit(userInput);},type:\"blue\"})})]})});}export default TxtInput;","map":{"version":3,"names":["React","useEffect","useRef","useState","useParams","loadingIcon","MyButton","CallGPT","TextInput","CallKoBERT","jsx","_jsx","jsxs","_jsxs","TxtInput","_useState","_useState2","_slicedToArray","userInput","setUserInput","handleSubmit","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","handleCreatePPT","stop","apply","arguments","_useState3","_useState4","data","setData","_useState5","_useState6","isLoading","setIsLoading","_ref2","_callee2","input","message","kobertResult","_callee2$","_context2","prompt","concat","sent","console","log","transformGPTOutput","text","t0","error","finish","_x","gptOutput","pages","split","database","pageTypeMapping","_iterator","_createForOfIteratorHelper","_step","s","n","done","page","value","lines","title","subtitle","contentList","pageNumber","pageType","_iterator2","_step2","_loop","line","Object","keys","some","pageTypeKey","includes","matchedPageTypeKey","find","parseInt","trim","push","length","err","e","f","dataDict","type","content","children","id","onSubmit","style","display","flexDirection","alignItems","gap","marginTop","src","alt","onClick"],"sources":["/Users/taein/Desktop/한이음/SwitchNote_1101/Switchnote_Front/src/components/TxtInput.js"],"sourcesContent":["//Txt->PPT 중 텍스트 업로드 페이지\nimport React, { useEffect, useRef, useState } from 'react';\nimport {useParams} from 'react-router-dom'\nimport loadingIcon from './images/loading.gif';\nimport MyButton from './MyButton.js';\nimport { CallGPT } from '../api/gpt';\nimport TextInput from './TextInput.js';\nimport { CallKoBERT } from '../api/kobert';\n\nfunction TxtInput() {\n    // 사용자 입력값 저장 상태\n    const [userInput, setUserInput] = useState(\"\");\n  \n    // ppt 생성 기능\n    const handleSubmit = async () => {\n      await handleCreatePPT(userInput);\n    }\n  \n    const [data, setData] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n  \n    // ppt 생성 함수\n    const handleCreatePPT = async(input) => {\n      try{\n        setIsLoading(true);\n        const message = await CallGPT({\n          prompt: `${input}`});\n        console.log(message);\n        console.log(transformGPTOutput(message));\n  \n        //kobertResult 변수에 kobert 수행 결과가 들어 있음\n        const kobertResult = await CallKoBERT({text: `${input}`})\n        console.log(kobertResult);\n      } catch(error) {\n        console.error(error);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n  \n    //gpt 결과를 {page:,type:,title:,subtitle:,content:} 형식으로 변환하는 함수\n    const transformGPTOutput = (gptOutput) => {\n      // '---' 기호를 기준으로 페이지 분리\n      const pages = gptOutput.split('---');\n    \n      const database = [];\n    \n      // 페이지 타입과 해당하는 알파벳 문자 매핑\n      const pageTypeMapping = {\n          '[표지]': 'a',\n          '[목차]': 'b',\n          '[본문]': 'c',\n          '[마무리]': 'd'\n      };\n    \n      for (const page of pages) {\n          const lines = page.split('\\n');\n    \n          let title = \"\", subtitle = \"\", contentList = [], pageNumber = 0, pageType = \"\";\n    \n          for (const line of lines) {\n              if (Object.keys(pageTypeMapping).some(pageTypeKey => line.includes(pageTypeKey))) {\n                  const matchedPageTypeKey = Object.keys(pageTypeMapping).find(pageTypeKey => line.includes(pageTypeKey));\n    \n                  if (matchedPageTypeKey) {\n                      pageType = pageTypeMapping[matchedPageTypeKey];\n                  }\n              } else if (line.includes(\"페이지 번호:\")) {\n                  pageNumber = parseInt(line.split(\"페이지 번호:\")[1].trim());\n              } else if (line.includes(\"제목:\")) {\n                  title += line.split(\"제목:\")[1].trim();\n              } else if (line.includes(\"소제목:\")) {\n                  subtitle += line.split(\"소제목:\")[1].trim();\n              } else if (line.includes(\"내용:\") || line.includes(\"마무리 문장:\")) {\n                  contentList.push(line.trim());\n              } else {\n                  if (line.trim().length > 0) {\n                      contentList.push(line.trim());\n                  }\n              }\n          }\n    \n          const dataDict = {\n              page: pageNumber, \n              type: pageType,\n              title: title, \n              subtitle: subtitle, \n              content: contentList\n          };\n    \n          database.push(dataDict);\n      }\n    \n      return database;\n    };\n\n  return(\n      <div>\n          <div id='TxtToPPT'>\n              Text to PPT\n              <div>\n                  PPT를 만드는 가장 빠른 방법\n              </div>\n\n              <div>\n                <TextInput \n                  isLoading={isLoading} \n                  onSubmit={setUserInput} \n                  value={userInput}\n                />\n              </div>\n              \n              <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap:'10px', marginTop:'50px'}}>\n                {isLoading ? (\n                  <img src={loadingIcon} alt=\"Loading...\" />\n                ) : (\n                  <MyButton \n                    text={'PPT 생성'}\n                    onClick={() => handleSubmit(userInput)}\n                    type={\"blue\"}\n                  />\n                )}\n              </div>\n          </div>\n      </div>\n  )\n}\n\nexport default TxtInput;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}